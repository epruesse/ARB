PROJECT ors_server
OBJECT_KEY ORS,			# MAIN PREFIX
MAX_KEY	299,			# MAX NUMBER OF AN ATTRIBUTE
MAX_OBJECT 6,			# MAX DIFFERENT STRUCTURES
MAX_STRING_LEN 1024,
MAX_PAR_CNT 16,
MAGIC_NUMBER 0x87a437,		#	MAGIC_NUMBER 6 HEX DIGITS

SERVER_INCLUDES (~
#include <stdio.h>
#include <aisc.h>
#include <aisc_com.h>~)
INCLUDE_INCLUDES (~$$(#FILE aisc_include.header)~)

DATA {

# ********************************* USER DATA *******************************************

# ******************************* PRIVAT STRUCTURES: DO NOT CHANGE *********************************

@STRUCT, @SKEY, @SKEYC, @SDOCU;

dll_public,	,	,	(~Vater einer DoubledLinkedList dll~), {
	@TYPE,		@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,	@KEYC,	@INIT,	@DOCU;
	t_key,		key,	t,	r,	,	,	,	,	(~ The key~);
	int,		cnt,	t,	r,	,	CNT,	0,	,	(~ Number of elements~);
	long,		hash,	t,	,	,	,	,	,	(~ Hash Table~);
	dllheader_ext,	parent,	flt,	r,	,	PARENT,	1,	,	(~ My Owner~);
	dllheader_ext,	last,	flt,	r,	,	LAST,	2,	,	(~ Pointer to the last element~);
	};


dll_header,	COMMON,	0,	(~Der Link Header (sollte Kopf jeder Funktion sein)~), {
	@TYPE,		@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,	@KEYC,	@INIT,	@DOCU;
	t_key,		key,	t,	r,	,	KEY,	0,	,	(~ The Key~);
	aisc_string,		aisc_get_keystring,%,r,	,	KEYSTRING,1,	,	(~ THE STRING of the KEY ~);
	dll_public,	parent,	ls,	r,	,	(~~),	2,	,	(~ Pointer to dll_public~);
	aisc_string,		ident,	t,	,	1,	IDENT,	5,	,	(~ The ident [not necessary]~);
	};


# ********************************* USER STRUCTURES *******************************************

ORS_local, LOCAL, 	2, 	(~local communication buffer~), {
	@TYPE,		@IDENT,		@REF,	@ACC,	@SAVE,	@KEY,			@KEYC,	@INIT,	@DOCU;
	dllh,		mh,		t,	,	,	(~~),			0,	,	(~Header~);
	int,		socket,		t,	,	,	,			,	ors_init_socket(THIS), (~the callback~),	DESTROY ors_destroy_socket(THIS);

	aisc_string, 	whoami,		t,	,	,	WHOAMI,			10,	,	(~ who am i ~);
	aisc_string, 	error,		t,	,	,	ERROR,			11,	"",	(~ error string ~);
	int,		use_advice,	t,	rw,	,	USEADVICE,		13,	,	(~ use the advice ~);
	bytestring, 	query_string,	t,	,	,	QUERY_STRING,		14,	,	(~ query string ~);
	bytestring, 	search_probe,	%,	r,	,	SEARCH_PROBE,		15,	,	(~ f:search a probe ~);

	aisc_string, 	dailypw,	t,	,	,	DAILYPW,		20,	,	(~ daily password ~);
	aisc_string, 	dailypw_2_userpath,%,	r,	,	DAILYPW_2_USERPATH, 	21,	,	(~ f:return userpath ~);

	aisc_string, 	calc_dailypw,	%,	r,	,	CALC_DAILYPW,   	25,	,	(~ f:calulate dailypw ~);

	aisc_string, 	userpath,	t,	,	,	USERPATH,		30,	,	(~ user's path ~);
	aisc_string, 	username,	t,	,	,	USERNAME,		31,	,	(~ user's fullname ~);
	aisc_string, 	password,	t,	,	,	PASSWORD,		32,	,	(~ user's password ~);
	aisc_string, 	remote_host,	t,	,	,	REMOTE_HOST,		33,	,	(~ remote host ~);
	aisc_string, 	remote_user,	t,	,	,	REMOTE_USER,		34,	,	(~ remote user ~);
	int,    	debug,  	t,	,	,	DEBUG,			35,	,	(~ debug mode ~);
	int,    	user_ta_id,  	t,	,	,	USER_TA_ID,		36,	,	(~ field transaction id ~);
	int,    	sel_user_ta_id,	t,	,	,	SEL_USER_TA_ID,		37,	,	(~ field transaction id ~);
	int,    	is_superuser,	t,	,	,	IS_SUPERUSER,		38,	,	(~ state of user ~);
	int,    	is_author,	t,	,	,	IS_AUTHOR,		39,	,	(~ state of user ~);

	aisc_string, 	user_own_info,	t,	,	,	USER_OWN_INFO,		40,	,	(~ user's own info ~);
	aisc_string, 	user_info,	t,	,	,	USER_INFO,		41,	,	(~ user's info (set by par.user) ~);
	aisc_string, 	mail_addr,	t,	,	,	MAIL_ADDR,		42,	,	(~ user's mail addresses ~);
	aisc_string, 	www_home,	t,	,	,	WWW_HOME,		43,	,	(~ user's www home page ~);
	int, 		max_users,	t,	,	,	MAX_USERS,		44,	,	(~ user's max num of subusers ~);
	int, 		curr_users,	t,	,	,	CURR_USERS,		45,	,	(~ user's current num of subusers ~);
	int, 		max_user_depth,	t,	,	,	MAX_USER_DEPTH,		46,	,	(~ user's max depth of own subusers ~);
	int, 		curr_user_depth, t,	,	,	CURR_USER_DEPTH,	47,	,	(~ user's current depth of own subusers ~);
	
	aisc_string, 	pub_exist_max,	 t,	,	,	PUB_EXIST_MAX,		50,	,	(~ max exist.pub ~);
	aisc_string, 	pub_content_max, t,	,	,	PUB_CONTENT_MAX,	51,	,	(~ max content.pub. ~);
	aisc_string, 	pub_exist_def,	 t,	,	,	PUB_EXIST_DEF,		52,	,	(~ default e.p. ~);
	aisc_string, 	pub_content_def, t,	,	,	PUB_CONTENT_DEF,	53,	,	(~ default c.p. ~);

	aisc_string, 	sel_user,   	t,	,	,	SEL_USER,   		60,	,	(~ selected user's name (without path) ~);
	aisc_string, 	sel_par_userpath, t,	,	,	SEL_PAR_USERPATH,	61,	,	(~ selected user's path (without name) ~);
	aisc_string, 	sel_userpath,  	t,	,	,	SEL_USERPATH,		62,	,	(~ s: user's path ~);
	aisc_string, 	sel_username,  	t,	,	,	SEL_USERNAME,		63,	,	(~ s: user's full name ~);
	aisc_string, 	sel_password,  	t,	,	,	SEL_PASSWORD,		64,	,	(~ s: user's password ~);
	aisc_string, 	sel_mail_addr,	t,	,	,	SEL_MAIL_ADDR,		65,	,	(~ s: u's mail addresses ~);
	aisc_string, 	sel_user_own_info, t,	,	,	SEL_USER_OWN_INFO,	66,	,	(~ s: u's own info ~);
	aisc_string, 	sel_user_info,	t,	,	,	SEL_USER_INFO,		67,	,	(~ s: u's info (set by par.user) ~);
	aisc_string, 	sel_www_home,	t,	,	,	SEL_WWW_HOME,		68,	,	(~ s: www home page ~);
	aisc_string, 	sel_pub_exist_max, t,	,	,	SEL_PUB_EXIST_MAX,	69,	,	(~ s: max exist.pub ~);
	aisc_string, 	sel_pub_content_max, t,	,	,	SEL_PUB_CONTENT_MAX,	70,	,	(~ s: max content.pub. ~);
	int, 		sel_max_users, 	t,	,	,	SEL_MAX_USERS,		71,	,	(~ s: max num of subusers. ~);
	int, 		sel_curr_users, t,	,	,	SEL_CURR_USERS,		72,	,	(~ s: max current of subusers. ~);
	int, 		sel_max_user_depth, t,	,	,	SEL_MAX_USER_DEPTH,	73,	,	(~ s: max depth of own subusers. ~);
	int, 		sel_is_superuser, t,	,	,	SEL_IS_SUPERUSER,	74,	,	(~ s: state of ~);
	int, 		sel_is_author, 	t,	,	,	SEL_IS_AUTHOR,		75,	,	(~ s: state of ~);

	aisc_string, 	work_on_user, 	%,	w,	,	WORK_ON_USER,   	80,	,	(~ f: modify preferences of user ~);
	aisc_string, 	work_on_sel_user, %,	w,	,	WORK_ON_SEL_USER,   	85,	,	(~ f: create/mod/del sel_user ~);
	aisc_string, 	read_user_field, %,	r,	,	READ_USER_FIELD,   	90,	,	(~ f: search user data ~);
	aisc_string, 	logout_user, 	%,	w,	,	LOGOUT_USER,   		95,	,	(~ f: logout ~);
	aisc_string, 	fieldname, 	t,	,	,	FIELDNAME,   		100,	,	(~ field to search for ~);
	aisc_string, 	action,   	t,	,	,	ACTION,   		101,	,	(~ action to do (create, delete, ...) ~);

	aisc_string, 	os_user_list, 	t,	,	,	OS_USER_LIST,   	102,	,	(~ list of users ~);
	aisc_string, 	list_type, 	t,	,	,	LIST_TYPE,   		103,	,	(~ list of users ~);
	aisc_string, 	list_of_users, %,	r,	,	LIST_OF_USERS,   	110,	,	(~ f: several user lists ~);
	aisc_string, 	get_sel_userdata,  %,	r,	,	GET_SEL_USERDATA,   	115,	,	(~ f:get sel_user data ~);


	int,    	probe_ta_id,  	t,	,	,	PROBE_TA_ID,		148,	,	(~ field transaction id ~);
	aisc_string, 	probe_field_section, t,	,	,	PROBE_FIELD_SECTION,   	149,	,	(~ fieldsection of probe data ~);
	aisc_string, 	probe_field_name, t,	,	,	PROBE_FIELD_NAME,   	150,	,	(~ fieldname of probe data ~);
	bytestring, 	probe_field_data, t,	,	,	PROBE_FIELD_DATA,   	151,	,	(~ one field of probe data ~);
	aisc_string, 	probe_id, 	t,	,	,	PROBE_ID,   		156,	,	(~ unique id of a probe ~);
	aisc_string, 	search_any_field,  t,	,	,	,   			157,	,	(~ search field ~);
	bytestring, 	probe_data_list, t,	,	,	PROBE_DATA_LIST,   	160,	,	(~ NOT USED list of probe data ~);
	int,	 	probe_list_type, t,	,	,	PROBE_LIST_TYPE,   	161,	,	(~ type of probe data list ~);
	int,	 	probe_list_max_count, t, ,	,	PROBE_LIST_MAX_COUNT,  	162,	,	(~ maximum count of items in probe list ~);
	aisc_string, 	clear_probe_fields, %,	r,	,	CLEAR_PROBE_FIELDS,   	165,	,	(~ f: clear all probe fields in server ~);
	aisc_string, 	put_probe_field, %,	w,	,	PUT_PROBE_FIELD,   	170,	,	(~ f: put probe field into server ~);
	aisc_string, 	work_on_probe, 	%,	w,	,	WORK_ON_PROBE,   	175,	,	(~ f: create/mod/del probe ~);
	aisc_string, 	probe_select, 	%,	w,	,	PROBE_SELECT,   	180,	,	(~ f: select probe via id~);
	bytestring, 	probe_query, 	%,	r,	,	PROBE_QUERY,  	 	185,	,	(~ f: query probe via fields ~);
	bytestring, 	get_probe_field,  %,	r,	,	GET_PROBE_FIELD,   	190,	,	(~ f: get field of sel. probe ~);
	bytestring, 	get_probe_list,  %,	r,	,	GET_PROBE_LIST,   	195,	,	(~ f: get probe data list ~);
	aisc_string, 	probe_user_transfer, %, w,	,	PROBE_USER_TRANSFER,   200,	,	(~ f: transfer probes from sel_userp. to string ~);
	aisc_string, 	save_probedb,  %,	w,	,	SAVE_PROBEDB,   	250,	,	(~ f: save database ~);
	aisc_string, 	save_userdb,  %,	w,	,	SAVE_USERDB,   		255,	,	(~ f: save database ~);
	};

OS_pdb_list, PDB_LIST, 	3, 	(~local communication buffer~), {
	@TYPE,		@IDENT,		@REF,	@ACC,	@SAVE,	@KEY,			@KEYC,	@INIT,	@DOCU;
	dllh,		mh,		t,	,	,	,			0,	,	(~Header~);
	aisc_string, 	section,	t,	,	,	,			,	,	(~ section or "" ~);
	aisc_string, 	name,		t,	,	,	,			,	,	(~ field name ~);
	aisc_string, 	db_name,	t,	,	,	,			,	,	(~ section + field as name for probedb ~);
	aisc_string, 	typ,		t,	,	,	,			,	,	(~ input type ~);
	int, 		width,		t,	,	,	,			,	,	(~ width ~);
	int, 		height,		t,	,	,	,			,	,	(~ height ~);
	aisc_string, 	rights,		t,	,	,	,			,	,	(~ RWE... ~);
	aisc_string, 	init,		t,	,	,	,			,	,	(~ string ~);
	aisc_string, 	label,		t,	,	,	,			,	,	(~ display label ~);
	aisc_string, 	help_page,	t,	,	,	,			,	,	(~ html help page ~);
	aisc_string, 	features,	t,	,	,	,			,	,	(~ feature tokens list " " ~);
	aisc_string,		content,	t,	,	,	,			,	,	(~ content, read from cgi_var etc. ~);
	};

ORS_main, MAIN, 1, (~Die globalen Daten~), SAVEDIRECTION VERTICAL, {
	@TYPE,	@IDENT,		@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	t_key, 	key,		t,	n,	,	,		,	,		(~Der KEY~);
	ORS_local,loc_st,	d,	,	,	LOCAL,		10,	,		(~Die Parameter~);
	OS_pdb_list,pdb_list,	d,	,	,	,		,	,		(~Die Liste der Datenbank Felder~);
	int,	touched,	t,	r,	,	TOUCHED,	19,	0,		(~ Do the database need to be saved ~);
	long,	pwds,		t,	r,	,	,		,	0,		(~ The daily pw database ~);
    aisc_string,server_shutdown, %,      w,      ,       SHUTDOWN,       20,     ,               (~SHUTDOWN Command~);
    int,	server_save,	%,      w,      ,       SAVEALL,	21, 	, 		(~SAVE everything~);
	aisc_string,server_file,	t,	r,	,	FILENAME,	22,	,		(~The filename of the keys~);
	};
};
