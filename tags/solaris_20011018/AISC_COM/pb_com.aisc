PROJECT pb_com
OBJECT_KEY PB,			# MAIN PREFIX
MAX_KEY	100,			# MAX NUMBER OF AN ATTRIBUTE
MAX_OBJECT 6,			# MAX DIFFERENT STRUCTURES
MAX_STRING_LEN 1024,
MAX_PAR_CNT 16,
MAGIC_NUMBER 0x471100,		#	MAGIC_NUMBER 6 HEX DIGITS
MYTABSTOP	8,
SERVER_INCLUDES (~
#include <stdio.h>
#include "pb_com.h"
#include "pb_com_keys.h"~)
INCLUDE_INCLUDES (~$$(#FILE aisc_include.header)~)

DATA {

# ********************************* USER DATA *******************************************

@CONST,		@VALUE,		@DOCU;
LIST_SIZE,	20,		(~Size of I_STR Buffer~);
OK,		1,		(~all ok~);
FAULT,		0,		(~an error~);

@ENUM;
bool, SKEY BOOL, {
	@VAR,	@VAL,	@DOCU;
	false,	,	nein;
	true,	,	ja;
};

# ******************************* PRIVAT STRUCTURES: DO NOT CHANGE *********************************

@STRUCT, @SKEY, @SKEYC, @SDOCU;

dll_public,	,	,	(~Vater einer DoubledLinkedList dll~), {
	@TYPE,		@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,	@KEYC,	@INIT,	@DOCU;
	t_key,		key,	t,	r,	,	,	,	,	(~ The key~);
	int,		cnt,	t,	r,	,	CNT,	0,	,	(~ Number of elements~);
	long,		hash,	t,	,	,	,	,	,	(~ Hash Table~);
	dllheader_ext,	parent,	flt,	r,	,	PARENT,	1,	,	(~ My Owner~);
	dllheader_ext,	last,	flt,	r,	,	LAST,	2,	,	(~ Pointer to the last element~);
	};


dll_header,	COMMON,	0,	(~Der Link Header (sollte Kopf jeder Funktion sein)~), {
	@TYPE,		@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,	@KEYC,	@INIT,	@DOCU;
	t_key,		key,	t,	r,	,	KEY,	0,	,	(~ The Key~);
	aisc_string,		aisc_get_keystring,%,r,	,	KEYSTRING,1,	,	(~ THE STRING of the KEY ~);
	dll_public,	parent,	ls,	r,	,	(~~),	2,	,	(~ Pointer to dll_public~);
	aisc_string,		ident,	t,	,	1,	IDENT,	5,	,	(~ The ident [not necessary]~);
	};


# ********************************* USER STRUCTURES *******************************************
doclist, DOCLIST, 	5, 	(~the document list~), {
	@TYPE,	@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	dllh,	mh,	t,	,	,	(~~),		0,	,		(~Header~);
	int,	docnr,	t,	r,	,	DOCNR,		10,	,		(~document number~);
	aisc_string,	doclab,	t,	r,	,	DOCLABEL,	11,	,		(~the document short label~);
	};

fieldlist, FIELDLIST, 	4, 	(~the field list~), {
	@TYPE,	@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	dllh,	mh,	t,	,	,	(~~),		0,	,		(~Header~);
	aisc_string,	field,	t,	r,	,	FIELD,		10,	,		(~the field~);
	};

labellist, LABELLIST, 	3, 	(~the field label list~), {
	@TYPE,	@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	dllh,	mh,	t,	,	,	(~~),		0,	,		(~Header~);
	aisc_string,	label,	t,	r,	,	LABEL,		10,	,		(~the field label~);
	int,	type,	t,	r,	,	TYPE,		11,	65,		(~the field type in ascii~);
	};


lstruct, LOCS, 	2, 	(~local communication buffer~), {
	@TYPE,	@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	dllh,	mh,	t,	,	,	(~~),		0,	,		(~Header~);
	aisc_string,	species,t,	rw,	,	SPECIES,	10,	"species",	(~a species ident~);
	aisc_string,	probe,	t,	rw,	,	PROBE,		11,	"not_specified",(~the probe~);
	aisc_string,	node,	t,	rw,	,	NODE,		12,	"main",		(~the node~);
	aisc_string,	query_err,t,	r,	,	ERROR_MSG,	13,	"",		(~the error~);
	int,	socket,	t,	,	,	,		,	pb_init_socket(this), (~the callback~), DESTROY pb_destroy_socket(this);
	int,	client_id,t,	,	,	,		,	pb_init_clientid(this), (~init clientid~);

	aisc_string,	user,	t,	rw,	,	USER,		20,	"unknown",	(~the username~);
	aisc_string,	address,t,	rw,	,	ADDRESS,	21,	"unknown",	(~the useraddress~);
	aisc_string,	login,	t,	rw,	,	LOGINTIME,	22,	"notime",	(~the date the user logged in~);
	aisc_string,	pb_test_passwd,	%,w,	,	PASSWD,		23,	,		(~the users passwd~);

	int,	q_cnt,	t,	r,	,	QCNT,		25,	,		(~the number of computed queries~);


	aisc_string,	query,	t,	w,	,	QUERY,		40,	"query",	(~the query text~);
	func,	do_query,%,	w,	,	DO_QUERY,	41,	,		(~eval query~);
	doclist,d_list,	d,	r,	,	DOCLIST,	42,	,		(~the document list~);
	bytestring,dn_list,t,	r,	,	DOCNRARRAY,	45,	,		(~intarray of docnrs~);
	bytestring,ds_list,t,	r,	,	DOCSARRAY,	46,	,		(~stringarray of docstring~);
	int,	hits,	t,	r,	,	HITS,		47,	,		(~the number of hit docs~);

	int,	doc_nr,	t,	rw,	,	DOC,		50,	-1,		(~document number~);
	func,	get_doc,%,	w,	,	GET_DOC,	51,	,		(~get_struct_fields~);
	fieldlist,f_list,d,	r,	,	FIELDLIST,	52,	,		(~the field value list~);
	bytestring,fs_list,t,	r,	,	FIELDARRAY,	55,	,		(~stringarray of fieldcontents~);
	bytestring,pb_get_text,%,r,	,	TEXT,		56,	,		(~stringarray of doctext~);
	int,	page_nr,t,	rw,	,	PAGE,		57,	0,		(~document number~);
	bytestring,pb_get_pic,%,r,	,	PIC,		58,	,		(~stringarray of docpagepic~);
	int,	page_anz,t,	rw,	,	PAGEANZ,	59,	0,		(~number of pages~);
	int,	pix_width,t,	rw,	,	PIX_WIDTH,	60,	0,		(~image pix width~);
	int,	pix_height,t,	rw,	,	PIX_HEIGHT,	61,	0,		(~image pix height~);
	int,	pix_length,t,	rw,	,	PIX_LENGTH,	62,	0,		(~image pix length~);
	int,	pix_maplength,t,rw,	,	PIX_MAPLENGTH,	63,	0,		(~image pix maplength~);

	aisc_string,	send_hot,%,	w,	,	SENDHOT,	65,	,		(~send hotline msg func~);
	aisc_string,	opanswer,%,	r,	,	OPANSWER,	66,	,		(~ get operator answer func ~);
	aisc_string, search_probe,%,	w,	,	SET_PROBE,	67,	,		(~ set the probe string ~);
	aisc_string, search_target,%,	w,	,	SET_TARGET,	68,	,		(~ set the probe string ~);
	bytestring, create_probe,%,w,	,	CREATE,		70,	,		(~ create probe ~);
	aisc_string, get_species_info,%,w,	,	GET_SPECIES,	75,	,		(~ get species info ~);
	bytestring, cr_answ,t,	r,	,	CREATEANSWER,	80,	,		(~ answer of create (probe) ~);
	};


seqlist, SEQLIST, 	6, 	(~the field label list~), {
	@TYPE,	@IDENT,	@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	dllh,	mh,	t,	,	,	(~~),		0,	,		(~Header~);
	aisc_string,	seq,	t,	,	,	,		,	,		(~the seq label~);
	int,	docnum,	t,	,	,	,		,	,		(~the seq docnr~);
	};

pbc_main, MAIN, 1, (~Die globalen Daten~), {
	@TYPE,	@IDENT,		@REF,	@ACC,	@SAVE,	@KEY,		@KEYC,	@INIT,		@DOCU;
	t_key, 	key,		t,	n,	,	,		,	,		(~Der KEY~);
	seqlist, seq_l,		d,	,	,	,		,	,		(~ probe seq list~);
	lstruct,loc_st,		d,	,	,	LOCS,		10,	,		(~Die Parameter~);
	func,	server_shutdown,%,	w,	,	SHUTDOWN,	20,	,		(~shut down~)	,EXTERN;
	aisc_string,	passwd,		t,	w,	,	PASSWD,		22,	"sdt5",		(~ shutdown passwd ~);
	labellist,l_list,	d,	,	,	LABELLIST,	26,	,		(~the field label list~);
	int,	l_cnt,		t,	r,	,	LCNT,		30,	0,		(~the number of field names~);
	int,	m_type,		t,	,	,	MESSAGE_TYPE,	31,	0,		(~the message type ~);
	aisc_string,	m_text,		t,	,	,	MESSAGE,	32,	"NO_MSG",	(~ the message text ~);
	func,	broadcast,	%,	w,	,	BROADCAST,	33,	,		(~ broadcast func ~);
	int,	pix_magic,	t,	rw,	,	PIX_MAGIC,	34,	0,		(~ pix magic num ~);
	int,	pix_type,	t,	rw,	,	PIX_TYPE,	35,	0,		(~ pix type ~);
	bytestring,c_tree,	t,	r,	,	TREE,		36,	,		(~compact tree~);
	bytestring,pt_answer_match,%,	w,	,	PTANSWER_MATCH,	40,	,		(~answer from pt server~);
	bytestring,pt_answer_create,%,	w,	,	PTANSWER_CREATE,41,	,		(~answer from pt server~);
	bytestring,pt_answer_find,%,	w,	,	PTANSWER_FIND,	42,	,		(~answer from pt server~);
	int,	pt_answer_id,	t,	w,	,	PTANSWERID,	44,	0,		(~pt server answer address~);
	};
}
