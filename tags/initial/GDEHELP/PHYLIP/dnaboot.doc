
                                                                    version 3.4


           DNABOOT - Bootstrap confidence intervals on DNA parsimony


(c)  Copyright  1986-1991  by  the  University  of  Washington  and  by  Joseph
Felsenstein.   Written  by  Joseph  Felsenstein.  Permission is granted to copy
this document provided that no fee is charged for it and  that  this  copyright
notice is not removed.

     DNABOOT implements the bootstrap method of placing  confidence  limits  on
phylogenies,  using  parsimony  for  DNA  sequences.  The bootstrap approach to
phylogenies is described in a  paper  of  mine  in  the  July,  1985  issue  of
Evolution  (Felsenstein,  1985b).  You should read that paper before using this
program.

     The bootstrap method samples  from  your  data,  drawing  characters  with
replacement,  to  create a new data table.  This is then analyzed, and a record
kept of all groups of species that form monophyletic subsets in  the  resulting
estimated  phylogeny.   The  process  of  resampling  and  estimating  is  then
repeated, and this is continued many times (at least 20  seems  necessary,  but
more  is  desireable).   If  you are interested in whether there is significant
evidence for the monophyly of some group, then you are to consider the evidence
significant  if  it  occurs in at least 95% of the bootstrap estimates.  If the
groups in which you are interested are chosen after seeing the results, then  a
more  conservative  rule  is necessary, such as considering a group significant
only if it occurs in at least 100 - 5/(n-2) percent of the bootstrap estimates,
where n is the number of species.

     This program contains a random number generator  and  uses  that  to  draw
bootstrap  samples of the data.  Each of these is analyzed and the monophyletic
groups in the resulting tree recorded.  At the end a table of these groups  and
their frequencies is printed out.

     The program can be fairly slow to run: the algorithm is the  one  used  in
DNAPARS,  and  if  50  bootstrap samples are drawn the program will take almost
precisely 50 times as long as a single DNAPARS run.  If you do  not  have  free
computer  time you may want to be careful about running this program.  Although
with DNAPARS I counsel multiple runs with different input orders of species  to
increase  the chance of finding a most parsimonious tree, I would not recommend
that for this program.  In my experience the variability of trees obtained from
the  different  bootstrap samples is so great that the much smaller increase in
precision resulting from multiple runs on each of those bootstrap sampled  data
sets  is  not  worth  the extra run time.  The program as presently constructed
runs only once for each bootstrap data set.  However each run  involves  global
branch swapping and can find multiple, equally parsimonious trees.  It would be
possible to instead use an algorithm such as that of DNAPENNY  to  be  sure  of
finding  the  most parsimonious tree for each bootstrap sampled data set, but I
am fairly sure that this would simply result in a great waste of computer time,
as  most  of  the breadth of the confidence interval comes from the variability
resulting from the bootstrap sampling process, not the failure to find the most
parsimonious trees.

     In the input file the user supplies a random number seed that controls the
random  sampling  process.   To take more random samples from the same data set
one can simply run the program again and supply a different random number seed,
combining  the  resulting  information on frequencies of monophyletic groups by
hand.



                                  ASSUMPTIONS

     The assumptions of this method are exactly analogous to those of DNAPARS:

     1.  Each site evolves independently.

     2.  Different lineages evolve independently.

     3.  The probability of a base substitution at a given site is  small  over
the lengths of time involved in a branch of the phylogeny.

     4.  The expected amounts of change in different branches of the  phylogeny
do not vary by so much that two changes in a high-rate branch are more probable
than one change in a low-rate branch.

     5.  The expected amounts of change do not vary enough among sites that two
changes in one site are more probable than one change in another.

     That these are the assumptions of parsimony methods has been documented in
a  series of papers of mine: (1973a, 1978b, 1979, 1981b, 1983b, 1988b).  For an
opposing  view  arguing  that  the  parsimony  methods  make   no   substantive
assumptions  such  as  these, see the papers by Farris (1983) and Sober (1983a,
1983b, 1988), but also read the exchange between Felsenstein and Sober (1986).

     Change from an occupied site to a  deletion  is  counted  as  one  change.
Reversion from a deletion to an occupied site is allowed and is also counted as
one change.

     The input file starts with a line containing the number of species and the
number  of  sites.   There  is only one option that requires information in the
input file, option W (Weights).  It requires that a W be present on  the  first
line  of  the input file, after the number of sites and separated from it by at
least one blank.  The Weights are specified in the usual way, as  described  in
the  main  documentation files.  As with other molecular sequence programs only
weights of 0 or 1 are allowed.  Bootstrapping or Delete-Half  Jackknifing  will
take  place  only  among  the sites that have weight 1, and the number of sites
drawn will reflect this number of sites with nonzero weights.

     Next come the species data.  Each sequence starts on a  new  line,  has  a
ten-character  species  name  that  must  be blank-filled to be of that length,
followed immediately by the species data in the one-letter code.  The sequences
must  either  be  in the "interleaved" or "sequential" formats described in the
Molecular Sequence Programs document.  The I option selects between them.   The
sequences  can  have internal blanks in the sequence but there must be no extra
blanks at the end of the terminated line.  Note that a blank  is  not  a  valid
symbol for a deletion.

     At the beginning of the a run, the program asks you for  a  random  number
seed.   The random number seed should be an odd number which leaves a remainder
of 1 when divided by 4, so that it is of the form 4n+1 (for example 241  is  of
this form but 255 is not).

     All other options are specified interactively in a menu.  The  menu  looks









like this:


Bootstrapped DNA parsimony algorithm, version 3.4

Settings for this run:
  J   Bootstrap or delete-half Jackknife?  Bootstrap
  R                  How many replicates?  100
  L       Global or local rearrangements?  Global
  O                        Outgroup root?  No, use as outgroup species  1
  T              Use Threshold parsimony?  No, use ordinary parsimony
  I          Input sequences interleaved?  Yes
  0   Terminal type (IBM PC, VT52, ANSI)?  IBM PC
  1    Print out the data at start of run  No
  2  Print indications of progress of run  Yes
  3   Write individual trees to tree file  No
  4                        Print out tree  Yes
  5       Write out trees onto tree file?  Yes

Are these settings correct? (type Y or the letter for one to change)

     The O (Outgroup), T (Threshold) and 0  (Graphics  type)  options  are  the
usual  ones  described  in  the main documentation file of this package.  The I
(Interleaved) option is described in the molecular sequence programs document.

     The T (Threshold) option allows a continuum of methods  between  parsimony
and  compatibility.   Thresholds  less  than  or  equal  to 1.0 do not have any
meaning and should not be used: they will result in a tree  dependent  only  on
the input order of species and not at all on the data!

     The J option is a Delete-Half Jackknife option.  If  it  is  invoked,  the
random  sampling  of characters will not follow the bootstrap pattern, in which
the same number of characters is drawn,  sampling  with  replacement.   Instead
half  the  number of characters will be drawn, sampling without replacement (in
other words, a random half of the characters will be drawn).  This should  give
results  comparable  to  the  bootstrap,  and is included partly for people who
prefer jackknifes to bootstraps.  The J menu  choice  toggles  back  and  forth
between the bootstrap and the delete-half jackknife.

     The R (Replicates)  option  allows  the  user  to  choose  the  number  of
bootstrap  (or  jackknife)  replicates that will be done.  The default value is
100.

     The  L  (Local)  option  allows  the  user  to  specify  that  only  local
rearrangements  of the tree will be used in searching for the most parsimonious
tree.  This can speed up the program by about a factor of three, but means that
the confidence intervals will be less accurate.  The L menu option toggles back
and forth between global and local branch swapping.

     Option 0 is the usual screen type option.  Option 1 controls  whether  the
data  is printed out on the output file.  Option 2 controls whether the program
reports on its progress.  It causes the program to print, 20 times  during  the
run,  a line informing you of how many replicates have been completed.  This is
included so that in the event that you run into a system time limit you will at
least know how close you were to finishing, and thus whether there is any point
in increasing the time limit and trying again.  It is also  meant  to  reassure
you that something is, in fact happening.

     Numerical option 3 is included  for  people  who  want  to  summarize  the
results  of the bootstrapping in different ways.  It causes all of the boostrap
estimate trees to be written out to the tree file (in the  same  format  as  in


option  5).   The  majority rule consensus tree will also be written out at the
end of that file if option 5 is in its default  state.   If  we  use  (say)  50
replicates  of  bootstrapping we may see more than 50 trees on the output file.
This is because there may be ties for most  parsimonious  tree,  and  all  tied
trees are saved.  To help the user evaluate the ties, the program prints out at
the end of each tied tree what fraction it  is  of  all  trees  found  in  that
bootstrap  replicate.   Thus  if 3 trees are found they all have weight 0.3333,
and that is written out at the end of the  tree,  after  the  final  semicolon.
Using  the file of individual trees you may be able to carry out other kinds of
analyses of the results of making bootstrap estimates.

     Option 4 causes the program to print out the final majority rule consensus
tree.  It is on by default.  Option 5 causes the tree to be written to the tree
file, and is also on by default.

     An important part of the output is a table showing the monophyletic groups
that  were  found,  and  the  number  of times they were found, in order of the
number of times they were found.  Only those groups that  are  compatible  with
the ones found most frequently are shown, because only those have any chance to
be significant (all groups that appear more than 50% of the time will be  shown
in  any case).  The groups are printed out in a straightforward fashion.  There
is one line for  each  monophyletic  group.   On  that  line  is  a  string  of
characters,  "*"  or ".", indicating respectively whether each species is ("*")
or is not (".") present in the group.  The species are in the  order  in  which
they appear in the input data.  Next on the line is the count of how many times
this group appeared.  If a number of equally most parsimonious trees (say 5  of
them)  were  found  and  the  group  appeared in only one of the these, this is
counted as 1/5 of an appearance.  Thus, if the species are A, B, C,  D,  and  E
and  are  input  in  that  order,  if the group (B, D, E) shows up in 36 of the
bootstrap estimates there should be a line that reads:

 .*.**                   36

in the table.  The majority-rule consensus tree could be reconstructed from the
table simply by taking all the groups that appear a majority of the time.

     Fortunately, the next part of  the  output  consists  of  a  tree  diagram
showing  the  majority rule consensus tree.   At each internal node of the tree
is printed the number of times the group above and to the right of that node is
found.  Thus if there are 100 replicates the tree:

           +--Epsilon
        +-67
     +-55  +--Delta
     !  !
  +100  +-----Gamma
  !  !
--*  +--------Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!

shows that group (Delta, Epsilon) occurred 67  times  out  of  100  replicates,
group (Gamma, Delta, Epsilon) 55 times, and group (Beta, Gamma, Delta, Epsilon)
all 100 times.  Of course, the last of these is not surprising since  the  tree
is unrooted and thus any group in it that contains all but one species is bound
to occur every time.

     Note that if the  trees  inferred  are  unrooted,  the  monophyly  of  the
resulting  groups  is  suspect to that extent.  Thus in an unrooted tree if one


sees the group (Beta, Delta, Epsilon) what that really  means  is  that  either
(Alpha,  Gamma)  or (Beta, Delta, Epsilon) is monophyletic, and you do not know
which without some rooting information.

     If the final tree is written on the tree file, it will  be  a  bifurcating
one,  and  after  each  group will be a number indicating how many times it was
found, so that if (A,B) occurs 35 times out of  50  replicates  the  tree  will
contain "(A:50,B:50):35".

     At the beginning of the program are a series of CONSTants,  which  can  be
changed to help adapt the program to different computer systems.  The constants
in this program which can be changed are the maximum number of  species  maxsp,
the  maximum  number  of  sites  maxsites,  the  maximum  number  of nucleotide
patterns, maxpatterns, the name length nmlngth, maxsz  which  is  derived  from
maxsp, and maxgrp, which is the maximum number of groups found over all trees.

     You may want to change these constants to speed up program  execution  and
reduce  memory  requirements.   Because  the current program is a bit crude, it
does not not allow a number of species larger than the Pascal set  size.   This
should  not  be  a  limitation  unless your Pascal only allows small sets.  The
constants bits and maxsp are set to 30 in the distribution version but they can
easily be increased and the program recompiled.

     The CONStant maxgrp gives the maximum  number  of  different  monophyletic
groups  that can be found.  It is initialized to 1000 in the distribution copy.
This should be plenty, but in case you find that you  need  to  change  it  you
should  be  safe if you set it to a value about twice the product of the number
of species and the number of replicates to be run.  In most cases you should be
able  to  get away with smaller values of maxgrp than that without encountering
the "hash table overflow" error  message.   If  you  do  encounter  that  error
message you should increase maxgrp.

     The program is a result of hybridizing BOOT and DNAPARS, and runs  at  the
same speed as DNAPARS for each replicate.

--------------------------TEST DATA SET---------------------------------

   5   13
Alpha     AACGUGGCCAAAU
Beta      AAGGUCGCCAAAC
Gamma     CAUUUCGUCACAA
Delta     GGUAUUUCGGCCU
Epsilon   GGGAUCUCGGCCC

--- CONTENTS OF OUTPUT FILE (with seed 3133 and all numerical options on) ---

Bootstrapped DNA parsimony algorithm, version 3.4


Set (species in order)     How many times out of 100

*....                          100.00



The numbers at the forks indicate the number
of times the group consisting of the species
to the right of that fork occurred among the
 100 bootstrap replicates



           +--Epsilon
        +-94
     +-77  +--Delta
     !  !
  +100  +-----Gamma
  !  !
--*  +--------Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!


















































