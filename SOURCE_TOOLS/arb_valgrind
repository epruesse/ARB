#!/bin/bash

if [ -z $1 ] ; then
    echo ''
    echo 'Usage: arb_valgrind [-c <callers>] [-f <filter>] <arb_program> <arguments>'
    echo ''
    echo '    runs valgrind on that program piping results through a filter'
    echo '    so that the output can be used as emacs error messages'
    echo ''
    echo '    <callers>      show <callers> stackframes (default: none)'
    echo '                   [in fact they are always shown, but not marked as errors]'
    echo '    <filter>       regexpr to filter the reason (default: all)'
    echo ''
    echo ''
    echo 'Usage: arb_valgrind update'
    echo ''
    echo '    Updates the source file list (needed to create correct error message)'
    echo ''
    echo 'Note: I use this from inside emacs as follows:'
    echo '          M-x compile'
    echo '      with:'
    echo '          (cd $ARBHOME;make nt) && arb_valgrind arb_ntree ~/ARB/demo.arb'
    echo ''
else
    DIR=$ARBHOME/SOURCE_TOOLS
    LIST=$DIR/valgrind2grep.lst

    UPDATE=0
    RUN=0
    CALLERS=0
    FILTER='.*'

    if [ ! -f $LIST ] ; then
        UPDATE=1
    fi
    if [ $1 = "update" ] ; then
        UPDATE=1
    else
        RUN=1
        if [ $1 = '-c' ] ; then
            CALLERS=$2
            shift 2
        fi
        if [ $1 = '-f' ] ; then
            FILTER=$2
            shift 2
        fi
    fi

    if [ $UPDATE = 1 ] ; then
        echo 'Creating source file list...'
        find $ARBHOME -name "*.[ch]" -o -name "*.[ch]xx" > $LIST
        echo 'done.'
    fi
    if [ $RUN = 1 ] ; then
        echo "Running valgrind on '$*' ..."
        echo "CALLERS='$CALLERS'"
        echo "FILTER ='$FILTER'"
        valgrind --leak-check=yes --num-callers=10 $* 2>&1 >/dev/null | $DIR/valgrind2grep $CALLERS "$FILTER"
        echo 'valgrind done.'
    fi
fi
