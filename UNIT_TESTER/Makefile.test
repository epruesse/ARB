# ----------------------------------------------------------
#   _  _  __ _  __  ____    ____  ____  ____  ____  ____
#  / )( \(  ( \(  )(_  _)  (_  _)(  __)/ ___)(_  _)/ ___)
#  ) \/ (/    / )(   )(      )(   ) _) \___ \  )(  \___ \
#  \____/\_)__)(__) (__)    (__) (____)(____/ (__) (____/
#
# ----------------------------------------------------------


.SUFFIXES: .cxx .o .sym

dummy:
	false

# ----------------------------------------------------------

VALGRIND=0# only test
#VALGRIND=1# run valgrind after sucessful test
#VALGRIND=2# run valgrind before test (useful if test traps w/o any helpful information)

# ----------------------------------------------------------

# restrict tests to modules matching regexpr 'RESTRICT_MODULE': 
RESTRICT_MODULE='.'
#RESTRICT_MODULE='MG_species\.cxx'

# restrict tests to library with basename
# (empty=no restriction, ':'-separated list of allowed test-names)
#
RESTRICT_LIB=# run all tests
#RESTRICT_LIB=client:arb_probe:AWTC# test only these libraries
#RESTRICT_LIB=ARBDB# test only this library
#RESTRICT_LIB=FAST_ALIGNER# test only this library
#RESTRICT_LIB=MERGE# test only this library

# ----------------------------------------------------------

#WARN_LEVEL=0# disable warnings 
WARN_LEVEL=1# enable warnings (recommended)

# ----------------------------------------------------------

# target 'ut' in main ARB makefile create patches each time (selected) unit tests succeed
DELETE_PATCHES_AFTER=20160# delete created patches after XXX min (20160=14 days)
#DELETE_PATCHES_AFTER=0# delete created patches instantly (always one patch present)

# ----------------------------------------------------------

RELUNITDIR=../$(UNITDIR)
FULLUNITDIR=$(ARBHOME)/$(UNITDIR)

SHAREDLIBS=\
	ARBDB \
	AWT \
	WINDOW \

EXEOBJDIRS=\
	TOOLS \

ISSHAREDLIB=$(findstring $(UNITDIR),$(SHAREDLIBS))
ISEXEOBJECT=$(findstring $(UNITDIR),$(EXEOBJDIRS))

ifneq ($(ISSHAREDLIB),)
	UNITLIB=lib$(UNITLIBNAME).so
else
ifneq ($(ISEXEOBJECT),)
	UNITLIB=$(UNITLIBNAME).o
else
	UNITLIB=$(UNITLIBNAME).a
endif
endif

UNIQUE_NAME=test_$(subst /,_,$(subst .,_,$(UNITDIR)_$(UNITLIB)))

FULLLIB=$(FULLUNITDIR)/$(UNITLIB)

DESTDIR=tests
RUNDIR=run
RUN2HERE=..# prefix from RUNDIR to here (UNIT_TESTER)

SYMLIST=$(DESTDIR)/$(UNIQUE_NAME).sym
TEST_CODE=$(DESTDIR)/$(UNIQUE_NAME).cxx
TEST_OBJ=$(DESTDIR)/$(UNIQUE_NAME).o
TEST_EXE=$(DESTDIR)/$(UNIQUE_NAME)

SYM2TESTCODE=./sym2testcode.pl

INCDIR=../INCLUDE

INCLUDES= \
	UnitTester.hxx \
	$(INCDIR)/arb_assert.h \

UNIT_TESTER_LIB=./UNIT_TESTER.a

ifeq ($(UNITLIB),.a)
# nothing given (only avoids undefined symbols)
LINKLIST=
LINKDEPS=
else
LINKLIST=$(shell ../SOURCE_TOOLS/needed_libs.pl -S -A .. -l $(FULLLIB))
LINKDEPS=$(shell ../SOURCE_TOOLS/needed_libs.pl -S -A .. -F $(FULLLIB))
endif

# --------------------------------------------------------------------------------

clean:
	rm -f $(DESTDIR)/*

# --------------------------------------------------------------------------------

$(DESTDIR):
	test -d $(DESTDIR) || mkdir -p $(DESTDIR)

$(RUNDIR):
	test -d $(RUNDIR) || mkdir -p $(RUNDIR)

makedirs: $(DESTDIR) $(RUNDIR)

$(SYMLIST) : $(FULLLIB) Makefile makedirs
	nm -C -l $< > $@

$(TEST_CODE) : $(SYMLIST) $(SYM2TESTCODE) 
	$(SYM2TESTCODE) $(UNITLIB) $(RESTRICT_MODULE) $< $@ $(WARN_LEVEL)

$(TEST_OBJ) : $(TEST_CODE) $(INCLUDES)
	$(CPP) $(cflags) -c $< -o $@ -I. 

$(TEST_EXE) : $(TEST_OBJ) $(UNIT_TESTER_LIB) $(LINKDEPS)
	$(LINK_EXECUTABLE) $@ $< $(UNIT_TESTER_LIB) -L../LIBLINK $(LINKLIST) $(EXECLIBS)

dump:
	@echo "$(SEP) dump $(UNITLIBNAME)"
	@echo "UNITDIR        ='$(UNITDIR)'"
	@echo "UNITLIBNAME    ='$(UNITLIBNAME)'"
	@echo "FULLUNITDIR    ='$(FULLUNITDIR)'"
	@echo "ISSHAREDLIB    ='$(ISSHAREDLIB)'"
	@echo "UNITLIB        ='$(UNITLIB)'"
	@echo "FULLLIB        ='$(FULLLIB)'"
	@echo "UNIQUE_NAME    ='$(UNIQUE_NAME)'"
	@echo "SYMLIST        ='$(SYMLIST)'"
	@echo "TEST_CODE      ='$(TEST_CODE)'"
	@echo "TEST_OBJ       ='$(TEST_OBJ)'"
	@echo "TEST_EXE       ='$(TEST_EXE)'"
	@echo "INCLUDES       ='$(INCLUDES)'"
	@echo "LINKLIST       ='$(LINKLIST)'"
	@echo "LINKDEPS       ='$(LINKDEPS)'"

valgrind:
	echo "Valgrinding.."
	cd $(RUNDIR);$(ARBHOME)/SOURCE_TOOLS/arb_valgrind -q -l -r -c 15 $(RUN2HERE)/$(TEST_EXE)

perform_test: $(TEST_EXE)
	@echo "fake[2]: Entering directory \`$(FULLUNITDIR)'"
ifeq ($(VALGRIND),2)
	$(MAKE) -f Makefile.test valgrind
endif
	cd $(RUNDIR);$(RUN2HERE)/$(TEST_EXE)
ifeq ($(COVERAGE),1)
	@echo "-------------------- test-coverage for $(UNITLIBNAME)"
	./gcov2msg.sh $(FULLUNITDIR) $(UNITLIBNAME)
	@echo "-------------------- test-coverage for $(UNITLIBNAME) [end]"
endif
ifeq ($(VALGRIND),1)
	$(MAKE) -f Makefile.test valgrind
endif
	@echo "fake[2]: Leaving directory \`$(FULLUNITDIR)'"

skip_test:
	@echo "unit-tests completely skipped for '$(UNITLIBNAME)'"

# --------------------

PATCHBASENAME=TestsOk

del_old_patches:
	@../SOURCE_TOOLS/arb_cleanup_patches.sh $(PATCHBASENAME) $(DELETE_PATCHES_AFTER) 

store_patch: del_old_patches
	@../SOURCE_TOOLS/arb_create_patch.sh $(PATCHBASENAME)

# --------------------

RUN:=perform_test

ifneq ('$(RESTRICT_LIB)','')
IS_RESTRICTED_TO=$(findstring :$(UNITLIBNAME):,:$(RESTRICT_LIB):)
ifeq ('$(IS_RESTRICTED_TO)','')
	RUN:=skip_test
endif
endif

runtest: $(RUN)

#runtest: dump

