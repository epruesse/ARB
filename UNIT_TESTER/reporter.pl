#!/usr/bin/perl

use strict;
use warnings;

# --------------------------------------------------------------------------------

my $logdirectory = undef;

# --------------------------------------------------------------------------------

sub get_existing_logs() {
  my @logs;
  opendir(LOGDIR,$logdirectory) || die "can't read directory '$logdirectory' (Reason: $!)";
  foreach (readdir(LOGDIR)) {
    if (/\.log$/o) { push @logs, $logdirectory.'/'.$_; }
  }
  closedir(LOGDIR);
  return @logs;
}

sub do_init() {
  my @logs = get_existing_logs();
  foreach (@logs) { unlink($_) || die "can't unlink '$_' (Reason: $!)"; }
  return undef;
}
# --------------------------------------------------------------------------------

my $tests    = 0;
my $skipped  = 0;
my $passed   = 0;
my $failed   = 0;
my $warnings = 0;
my $elapsed  = 0;

sub parse_log($) {
  # parse reports generated by UnitTester.cxx@generateReport
  my ($log) = @_;
  open(LOG,$log) || die "can't open '$log' (Reason: $!)";

  my $tests_this   = 0;
  my $skipped_this = 0;
  my $passedALL    = 0;

  while ($_ = <LOG>) {
    chomp;
    if (/^UnitTester:/) {
      if (/tests=([0-9]+)/)   { $tests_this += $1; }
      if (/skipped=([0-9]+)/) { $skipped_this += $1; }

      if (/passed=([0-9]+)/)  { $passed += $1; }
      if (/passed=ALL/)       { $passedALL = 1; }

      if (/failed=([0-9]+)/)  { $failed += $1; }
      if (/warnings=([0-9]+)/)  { $warnings += $1; }
      if (/time=([0-9.]+)/)   { $elapsed += $1; }
    }
  }
  close(LOG);

  $tests   += $tests_this;
  $skipped += $skipped_this;

  if ($passedALL==1) { $passed += ($tests_this-$skipped_this); }
}

sub percent($$) {
  my ($part,$all) = @_;
  my $percent = 100*$part/$all;
  return sprintf("%5.1f%%", $percent);
}



sub print_summary() {
  print "Unit-test summary:\n";
  print sprintf(" Tests   : %4i\n", $tests);
  print sprintf(" Skipped : %4i =%s\n", $skipped, percent($skipped,$tests));
  print sprintf(" Passed  : %4i =%s\n", $passed, percent($passed,$tests));
  print sprintf(" Failed  : %4i =%s\n", $failed, percent($failed,$tests));
  print sprintf(" Elapsed : %4i ms\n", $elapsed);
  print sprintf(" Warnings: %4i\n", $warnings);
}

sub do_report() {
  my @logs = get_existing_logs();
  foreach (@logs) {
    parse_log($_);
  }

  print_summary();

  if ($failed>0) {
    die "tests failed\n";
  }
}

# --------------------------------------------------------------------------------

sub main() {
  my $error = undef;
  my $cb    = undef;
  {
    my $args = scalar(@ARGV);
    if ($args==2) {
      my $command   = shift @ARGV;

      if ($command eq 'init') { $cb = \&do_init; }
      elsif ($command eq 'report') { $cb = \&do_report; }
      else { $error = "Unknown command '$command'"; }

      if (not $error) {
        $logdirectory = shift @ARGV;
        if (not -d $logdirectory) {
          $error = "No such directory '$logdirectory'";
        }
      }
    }
    else {
      $error = 'Wrong number of arguments';
    }
  }
  if ($error) { print "Usage: reporter.pl [init|report] logdirectory\n"; }
  else {
    eval { $error = &$cb(); };
    if ($@) { $error = $@; }
  }
  if ($error) { die $error; }
}
main();
