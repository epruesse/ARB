/* This file is generated by aisc_mkpt.
 * Any changes you make here will be overwritten later!
 */

#ifndef PROTOTYPES_H
#define PROTOTYPES_H

/* define ARB attributes: */
#ifndef ATTRIBUTES_H
# include <attributes.h>
#endif


/* date.cxx */
const char *genbank_date(const char *other_date);
bool find_date(const char *date_string, int *month, int *day, int *year) __ATTR__USERESULT;
bool two_char(const char *str, char determ);
bool find_date_long_form(const char *date_string, int *month, int *day, int *year);
int ismonth(const char *str);
int isdatenum(char *Str);
int is_genbank_date(const char *str);
const char *today_date(void);
const char *gcg_date(const char *input);

/* embl.cxx */
char embl_in(Embl &embl, Seq &seq, FILE_BUFFER fp);
char embl_in_id(Embl &embl, Seq &seq, FILE_BUFFER fp);
void embl_key_word(const char *line, int index, char *key, int length);
char *embl_continue_line(char *pattern, char *&Str, char *line, FILE_BUFFER fp);
char *embl_one_entry(char *line, FILE_BUFFER fp, char *&entry, char *key);
void embl_correct_title(Emblref &ref);
char *embl_date(Embl &embl, char *line, FILE_BUFFER fp);
char *embl_comments(Embl &embl, char *line, FILE_BUFFER fp);
char *embl_skip_unidentified(char *pattern, char *line, FILE_BUFFER fp);
int embl_comment_key(char *line, char *key);
char *embl_one_comment_entry(FILE_BUFFER fp, char *&datastring, char *line, int start_index);
char *embl_origin(Seq &seq, char *line, FILE_BUFFER fp);
void embl_out(const Embl &embl, const Seq &seq, FILE *fp);
void embl_out_comments(const Embl &embl, const Seq &seq, FILE *fp);
void embl_print_comment_if_content(FILE *fp, const char *key, const char *content);
void embl_out_origin(const Seq &seq, FILE *fp);
void embl_to_macke(const char *inf, const char *outf, int format);
int etom(const Embl &embl, Macke &macke, const Seq &seq) __ATTR__USERESULT;
void embl_to_embl(const char *inf, const char *outf);
void embl_to_genbank(const char *inf, const char *outf);
int etog(const Embl &embl, GenBank &gbk, const Seq &seq) __ATTR__USERESULT;
void etog_convert_references(const Embl &embl, GenBank &gbk);
char *etog_author(char *Str);
char *etog_journal(const char *eJournal);
void etog_convert_comments(const Embl &embl, GenBank &gbk);
void genbank_to_embl(const char *inf, const char *outf);
int gtoe(const GenBank &gbk, Embl &embl, const Seq &seq) __ATTR__USERESULT;
void gtoe_reference(const GenBank &gbk, Embl &embl);
char *gtoe_author(char *author);
char *gtoe_journal(char *Str);
void gtoe_comments(const GenBank &gbk, Embl &embl);
int mtoe(const Macke &macke, Embl &embl, const Seq &seq) __ATTR__USERESULT;
void macke_to_embl(const char *inf, const char *outf);
int partial_mtoe(const Macke &macke, Embl &embl);

/* fconv.cxx */
const char *format2name(int format_type);
void throw_conversion_not_supported(int input_format, int output_format) __ATTR__NORETURN;
void throw_conversion_failure(int input_format, int output_format);
void log_processed(int seqCount);
void convert(const char *inf, const char *outf, int intype, int outype);

/* gcg.cxx */
void to_gcg(const char *inf, const char *outf, int intype);
void gcg_seq_out(const Seq &seq, FILE *ofp, const char *key);
void gcg_doc_out(const char *line, FILE *ofp);
void gcg_out_origin(const Seq &seq, FILE *fp);

/* genbank.cxx */
char genbank_in(GenBank &gbk, Seq &seq, FILE_BUFFER fp);
void genbank_key_word(const char *line, int index, char *key, int length);
int genbank_comment_subkey_word(char *line, int index, char *key, int length);
int genbank_check_blanks(char *line, int numb);
char *genbank_one_entry_in(char *&datastring, char *line, FILE_BUFFER fp);
char *genbank_one_comment_entry(char *&datastring, char *line, int start_index, FILE_BUFFER fp);
char *genbank_source(GenBank &gbk, char *line, FILE_BUFFER fp);
char *genbank_reference(GenBank &gbk, char *line, FILE_BUFFER fp);
const char *genbank_comments(GenBank &gbk, char *line, FILE_BUFFER fp);
char *genbank_origin(Seq &seq, char *line, FILE_BUFFER fp);
char *genbank_skip_unidentified(char *line, FILE_BUFFER fp, int blank_num);
void genbank_verify_accession(GenBank &gbk);
void genbank_verify_keywords(GenBank &gbk);
char genbank_in_locus(GenBank &gbk, Seq &seq, FILE_BUFFER fp);
void genbank_out_one_reference(FILE *fp, const GenbankRef &gbk_ref, int gbk_ref_num, bool SIMULATE_BUG);
void genbank_out(const GenBank &gbk, const Seq &seq, FILE *fp);
void genbank_print_comment_if_content(FILE *fp, const char *key, const char *content);
void genbank_out_origin(const Seq &seq, FILE *fp);
void genbank_to_genbank(const char *inf, const char *outf);

/* macke.cxx */
void macke_one_entry_in(Reader &reader, const char *key, char *oldname, char *&var, int index);
void macke_continue_line(const char *key, char *oldname, char *&var, Reader &reader);
char *macke_origin(Seq &seq, const char *key, char *line, FILE_BUFFER fp) __ATTR__DEPRECATED;
void macke_origin(Seq &seq, const char *key, Reader &reader);
int macke_abbrev(const char *line, char *key, int index);
bool macke_is_continued_remark(const char *str);
char macke_in_name_and_data(Macke &macke, Seq &seq, FILE_BUFFER fp);
void macke_out_header(FILE *fp);
void macke_seq_display_out(const Macke &macke, FILE *fp, int format, bool first_sequence);
void macke_seq_info_out(const Macke &macke, FILE *fp);
void macke_print_keyword_rem(const Macke &macke, int index, FILE *fp);
void macke_print_line(FILE *fp, const char *prefix, const char *content);
int macke_key_word(const char *line, int index, char *key, int length);
int macke_in_one_line(const char *Str);
void macke_seq_data_out(const Seq &seq, const Macke &macke, FILE *fp);

/* main.cxx */

/* mg.cxx */
void genbank_to_macke(const char *inf, const char *outf);
int gtom(const GenBank &gbk, Macke &macke) __ATTR__USERESULT;
void add_35end_remark(Macke &macke, char end35, char yn);
void gtom_remarks(const GenBank &gbk, Macke &macke);
char *genbank_get_strain(const GenBank &gbk);
char *genbank_get_subspecies(const GenBank &gbk);
int paren_string(char *Str, char *pstring, int index);
void macke_to_genbank(const char *inf, const char *outf);
int mtog(const Macke &macke, GenBank &gbk, const Seq &seq) __ATTR__USERESULT;
void mtog_decode_ref_and_remarks(const Macke &macke, GenBank &gbk);
void mtog_genbank_def_and_source(const Macke &macke, GenBank &gbk);
void get_atcc_string(char *line, char *temp, int index);

/* paup.cxx */
void to_paup(const char *inf, const char *outf, int informat);
void paup_verify_name(char *&Str);
void paup_print_line(const Seq &seq, int offset, int first_line, FILE *fp);
void paup_print_header(const Paup &paup, FILE *ofp);

/* phylip.cxx */
void to_phylip(const char *inf, const char *outf, int informat, int readstdin);
void phylip_print_line(const Seq &seq, int index, FILE *fp);

/* printable.cxx */
void to_printable(const char *inf, const char *outf, int informat);
void printable_print_line(const char *id, const char *sequence, int start, int base_count, FILE *fp);

/* util.cxx */
bool scan_token(const char *from, char *to) __ATTR__USERESULT;
void scan_token_or_die(const char *from, char *to, FILE_BUFFER *fb);
void throw_error(int error_num, const char *error_message) __ATTR__NORETURN;
char *strf(const char *format, ...) __ATTR__FORMAT(1);
void throw_errorf(int error_num, const char *error_messagef, ...) __ATTR__FORMAT(2) __ATTR__NORETURN;
void throw_cant_open_input(const char *filename);
void throw_cant_open_output(const char *filename);
FILE *open_input_or_die(const char *filename);
FILE *open_output_or_die(const char *filename);
void warning(int warning_num, const char *warning_message);
void warningf(int warning_num, const char *warning_messagef, ...) __ATTR__FORMAT(2);
char *Reallocspace(void *block, unsigned int size);
int Skip_white_space(const char *line, int index);
int Reach_white_space(char *line, int index);
char *Fgetline(char *line, size_t maxread, FILE_BUFFER fb);
void Getstr(char *line, int linenum);
void terminate_with(char *&str, char ch);
void skip_eolnl_and_append(char *&string1, const char *string2);
void skip_eolnl_and_append_spaced(char *&string1, const char *string2);
void Append(char *&string1, const char *string2);
void upcase(char *str);
void fputc_rep(char c, int repeat, FILE *fp);
int fputs_len(const char *str, int len, FILE *out);
int find_pattern(const char *text, const char *pattern);
int skip_pattern(const char *text, const char *pattern);
int find_subspecies(const char *str, char expect_behind);
int skip_subspecies(const char *str, char expect_behind);
int find_strain(const char *str, char expect_behind);
int skip_strain(const char *str, char expect_behind);
const char *stristr(const char *str, const char *substring);

#else
#error prototypes.h included twice
#endif /* PROTOTYPES_H */
