
notarget:
	@echo "Usage: make (init|cleanup|unskip)" 
	false

include Makefile.setup.include

TEST_REPORTER = ./reporter.pl
TEST_LOG_DIR = ./logs

PATCHNAMEBASE:=TestsOk
PATCHNAMESUFFIX:=

VALGRIND_INTERNAL=$(findstring B,$(VALGRIND))$(findstring A,$(VALGRIND))
VALGRIND_EXTERNAL=$(findstring E,$(VALGRIND))
VALGRIND_ANY=$(VALGRIND_INTERNAL)$(VALGRIND_EXTERNAL)

# -------------------- build patch name

ifneq ('$(RESTRICT_LIB)','')
PATCHNAMESUFFIX:=$(PATCHNAMESUFFIX)__only_$(RESTRICT_LIB)
endif

ifneq ($(RESTRICT_MODULE),'.')
PATCHNAMESUFFIX:=$(PATCHNAMESUFFIX)__notAllFiles
endif

SKIPPED_SLOW:=$(shell (test -f skipslow.stamp && ls -1 skipslow.stamp))
ifneq ('$(SKIPPED_SLOW)','')
PATCHNAMESUFFIX:=$(PATCHNAMESUFFIX)__SLOW_skipped
endif

ifneq ('$(VALGRIND_ANY)','')
PATCHNAMESUFFIX:=$(PATCHNAMESUFFIX)__valgrinded_$(VALGRIND_ANY)
endif

PATCHNAMESUFFIX:=$(subst :,_,$(PATCHNAMESUFFIX))

# -------------------- targets

cleanup_environment:
	./test_environment clean || echo "Failed to clean environment (maybe some setup/cleanup crashed?)"
ifeq ($(VALGRIND_EXTERNAL),E)
	./valgrind/arb_valgrind_logged WAIT
endif

tests_passed: cleanup_environment
	@$(TEST_REPORTER) report $(TEST_LOG_DIR) $(SKIP_SLOW)

update_patches_if_passed: tests_passed
	@../SOURCE_TOOLS/arb_create_patch.sh $(PATCHNAMEBASE)$(PATCHNAMESUFFIX)
	@../SOURCE_TOOLS/arb_cleanup_patches.pl $(PATCHNAMEBASE) $(PATCHES_KEEP_HOURS) $(PATCHES_MIN_KEPT) 

unskip:
	@(test -f skipslow.stamp && rm skipslow.stamp) || true

init:
	@echo "$(SEP) Running unit tests"
#ifeq ($(VALGRIND_EXTERNAL),E)
	./valgrind/arb_valgrind_logged INIT "$(VALGRIND_EXTERNAL)" $(CHECK_LEAKS)
#endif
	@$(TEST_REPORTER) init $(TEST_LOG_DIR) $(SKIP_SLOW)

cleanup: update_patches_if_passed
	@echo "$(SEP) All unit tests passed"

